"""
Script de pr√©paration des donn√©es
Mountain Energy Score - Haute-Savoie

Ce script effectue les op√©rations suivantes :
1. Chargement des donn√©es DPE du d√©partement 74
2. Nettoyage et validation des donn√©es
3. Ajout des cat√©gories d'altitude
4. Export des donn√©es pr√©par√©es pour les analyses

Note : L'altitude est directement disponible dans le fichier DPE
"""

import pandas as pd
import numpy as np
from pathlib import Path
import json

# Import de la configuration du projet
from config import (
    DEPARTEMENT, NOM_DEPARTEMENT,
    DATA_PATH, DATA_PROCESSED_PATH,
    categoriser_altitude
)

# ============================================================================
# AFFICHAGE D'EN-T√äTE
# ============================================================================

print("\n" + "="*80)
print(f"PR√âPARATION DES DONN√âES - D√âPARTEMENT {DEPARTEMENT}")
print("="*80 + "\n")

# ============================================================================
# CHARGEMENT DES DONN√âES SOURCES
# ============================================================================

print("üìÇ Chargement des fichiers sources...\n")

# Chargement des donn√©es DPE (contient d√©j√† l'altitude)
# low_memory=False √©vite les warnings sur les types de colonnes mixtes
fichier_dpe = DATA_PATH / f"logements_{DEPARTEMENT}.csv"
print(f"   ‚Üí Lecture de {fichier_dpe.name}...")
df_logements = pd.read_csv(fichier_dpe, low_memory=False)
print(f"      ‚úÖ {len(df_logements):,} logements charg√©s\n")

# ============================================================================
# S√âLECTION DES COLONNES UTILES
# ============================================================================

print("üîß S√©lection des colonnes pertinentes...\n")

# Colonnes essentielles pour l'analyse √©nerg√©tique
colonnes_logements = [
    'numero_dpe',                          # Identifiant unique du DPE
    'code_insee_ban',                      # Code commune
    'nom_commune_ban',                     # Nom de la commune
    'etiquette_dpe',                       # Classe √©nerg√©tique (A √† G)
    'conso_5_usages_par_m2_ep',           # Consommation en kWh/m¬≤/an
    'surface_habitable_logement',          # Surface en m¬≤ (pour calculs de co√ªts)
    'type_batiment',                       # Maison ou appartement
    'periode_construction',                # √âpoque de construction
    'type_energie_principale_chauffage',   # Type de chauffage utilis√©
    'altitude_moyenne'                     # Altitude moyenne (d√©j√† dans le DPE)
]

# V√©rification de la pr√©sence des colonnes
colonnes_presentes = [col for col in colonnes_logements if col in df_logements.columns]
if len(colonnes_presentes) < len(colonnes_logements):
    colonnes_manquantes = set(colonnes_logements) - set(colonnes_presentes)
    print(f"   ‚ö†Ô∏è  Colonnes manquantes : {colonnes_manquantes}")

df_preparation = df_logements[colonnes_presentes].copy()
print(f"   ‚úÖ {len(colonnes_presentes)} colonnes s√©lectionn√©es\n")

# ============================================================================
# NETTOYAGE DES DONN√âES
# ============================================================================

print("üßπ Nettoyage des donn√©es...\n")

# Suppression des doublons de DPE (un logement peut avoir plusieurs DPE, on garde le plus r√©cent)
nb_avant = len(df_preparation)
df_preparation = df_preparation.drop_duplicates(subset='numero_dpe', keep='first')
nb_supprimes = nb_avant - len(df_preparation)
print(f"   ‚Üí Doublons supprim√©s : {nb_supprimes:,}")

# Suppression des lignes avec des valeurs manquantes critiques
# Ces variables sont indispensables pour l'analyse
df_preparation = df_preparation.dropna(subset=['code_insee_ban', 'etiquette_dpe', 'conso_5_usages_par_m2_ep'])
print(f"   ‚Üí Lignes valides conserv√©es : {len(df_preparation):,}")

# V√©rification de la disponibilit√© des altitudes
nb_avec_altitude = df_preparation['altitude_moyenne'].notna().sum()
taux_altitude = (nb_avec_altitude / len(df_preparation)) * 100

print(f"   ‚Üí Logements avec altitude : {nb_avec_altitude:,} ({taux_altitude:.1f}%)")

if taux_altitude < 95:
    print(f"   ‚ö†Ô∏è  {len(df_preparation) - nb_avec_altitude:,} logements sans altitude")

print()

# ============================================================================
# D√âTECTION ET CORRECTION DES ANOMALIES
# ============================================================================

print("üîç D√©tection et correction des anomalies...\n")

nb_avant_corrections = len(df_preparation)

# Anomalie 1 : Consommations aberrantes
# Consommations tr√®s √©lev√©es (> 1000 kWh/m¬≤/an) sont souvent des erreurs de saisie
# La m√©diane est ~193 kWh/m¬≤/an, au-del√† de 1000 c'est suspect
anomalies_conso_hautes = df_preparation['conso_5_usages_par_m2_ep'] > 1000
nb_conso_hautes = anomalies_conso_hautes.sum()

if nb_conso_hautes > 0:
    print(f"   ‚ö†Ô∏è  Consommations aberrantes (> 1000 kWh/m¬≤/an) : {nb_conso_hautes:,}")
    print(f"      ‚Üí Suppression de ces lignes (erreurs de saisie probables)")
    df_preparation = df_preparation[~anomalies_conso_hautes]

# Anomalie 2 : Consommations tr√®s basses
# Consommations < 10 kWh/m¬≤/an sont impossibles (m√™me pour maisons passives)
anomalies_conso_basses = df_preparation['conso_5_usages_par_m2_ep'] < 10
nb_conso_basses = anomalies_conso_basses.sum()

if nb_conso_basses > 0:
    print(f"   ‚ö†Ô∏è  Consommations anormalement basses (< 10 kWh/m¬≤/an) : {nb_conso_basses:,}")
    print(f"      ‚Üí Suppression de ces lignes (erreurs de mesure)")
    df_preparation = df_preparation[~anomalies_conso_basses]

# Anomalie 3 : Altitudes aberrantes pour la Haute-Savoie
# Le d√©partement va de ~335m (Lac L√©man) √† ~2445m (haute montagne habit√©e)
# Au-del√† de 3000m, il n'y a plus de logements permanents
anomalies_altitude_hautes = df_preparation['altitude_moyenne'] > 3000
nb_alt_hautes = anomalies_altitude_hautes.sum()

if nb_alt_hautes > 0:
    print(f"   ‚ö†Ô∏è  Altitudes aberrantes (> 3000m) : {nb_alt_hautes:,}")
    print(f"      ‚Üí Suppression de ces lignes (erreurs de g√©olocalisation)")
    df_preparation = df_preparation[~anomalies_altitude_hautes]

# Anomalie 4 : Surfaces aberrantes
# Les logements avec des surfaces extr√™mes sont exclus car ils faussent les statistiques :
# - < 5m¬≤ : boxes/garages (hors p√©rim√®tre des logements r√©sidentiels) ou erreurs de saisie
# - > 500m¬≤ : immeubles entiers saisis comme logement unique (erreur administrative)
#             ou propri√©t√©s exceptionnelles (ch√¢teaux, manoirs) non repr√©sentatives
#
# Impact : ces logements (~734 soit 0.36%) fausseraient les comptages par cat√©gorie DPE
# et ne refl√®tent pas le parc r√©sidentiel typique. Leur exclusion garantit une analyse
# sur des logements comparables et repr√©sentatifs.
anomalies_surface_basses = df_preparation['surface_habitable_logement'] < 5
anomalies_surface_hautes = df_preparation['surface_habitable_logement'] > 500
nb_surf_basses = anomalies_surface_basses.sum()
nb_surf_hautes = anomalies_surface_hautes.sum()

if nb_surf_basses > 0:
    print(f"   ‚ö†Ô∏è  Surfaces aberrantes (< 5m¬≤) : {nb_surf_basses:,}")
    print(f"      ‚Üí Suppression (box/garage, hors scope logement r√©sidentiel)")
    df_preparation = df_preparation[~anomalies_surface_basses]

if nb_surf_hautes > 0:
    print(f"   ‚ö†Ô∏è  Surfaces aberrantes (> 500m¬≤) : {nb_surf_hautes:,}")
    print(f"      ‚Üí Suppression (immeubles entiers compt√©s comme logements individuels)")
    print(f"      ‚Üí Impact : √©vite de fausser les comptages DPE (ex: +533 en classe C)")
    df_preparation = df_preparation[~anomalies_surface_hautes]

# R√©sum√© des corrections
nb_total_supprimes = nb_avant_corrections - len(df_preparation)

if nb_total_supprimes > 0:
    print(f"\n   ‚úÖ Total anomalies corrig√©es : {nb_total_supprimes:,} lignes supprim√©es")
    print(f"      ({nb_total_supprimes/nb_avant_corrections*100:.2f}% des donn√©es)")
else:
    print(f"   ‚úÖ Aucune anomalie d√©tect√©e - Donn√©es de bonne qualit√©")

print()

# ============================================================================
# EXPLORATION DES DONN√âES
# ============================================================================

print("üìä Exploration des donn√©es nettoy√©es...\n")

# Statistiques sur les colonnes principales
print("   üî¢ Statistiques par colonne :\n")

# 1. Consommation
conso = df_preparation['conso_5_usages_par_m2_ep']
print(f"      Consommation √©nerg√©tique (kWh/m¬≤/an) :")
print(f"         Min     : {conso.min():6.1f}")
print(f"         Q1      : {conso.quantile(0.25):6.1f}")
print(f"         M√©diane : {conso.median():6.1f}")
print(f"         Q3      : {conso.quantile(0.75):6.1f}")
print(f"         Max     : {conso.max():6.1f}")
print(f"         Moyenne : {conso.mean():6.1f}")

# 2. Altitude
altitude = df_preparation['altitude_moyenne']
print(f"\n      Altitude (m√®tres) :")
print(f"         Min     : {altitude.min():6.0f}m")
print(f"         Q1      : {altitude.quantile(0.25):6.0f}m")
print(f"         M√©diane : {altitude.median():6.0f}m")
print(f"         Q3      : {altitude.quantile(0.75):6.0f}m")
print(f"         Max     : {altitude.max():6.0f}m")
print(f"         Moyenne : {altitude.mean():6.0f}m")

# 3. Surface habitable
surface = df_preparation['surface_habitable_logement']
print(f"\n      Surface habitable (m¬≤) :")
print(f"         Min     : {surface.min():6.0f}m¬≤")
print(f"         Q1      : {surface.quantile(0.25):6.0f}m¬≤")
print(f"         M√©diane : {surface.median():6.0f}m¬≤")
print(f"         Q3      : {surface.quantile(0.75):6.0f}m¬≤")
print(f"         Max     : {surface.max():6.0f}m¬≤")
print(f"         Moyenne : {surface.mean():6.0f}m¬≤")

# 4. R√©partition des √©tiquettes DPE
print(f"\n      R√©partition des √©tiquettes DPE :")
dpe_counts = df_preparation['etiquette_dpe'].value_counts().sort_index()
for etiquette, count in dpe_counts.items():
    pct = count / len(df_preparation) * 100
    print(f"         {etiquette} : {count:7,} ({pct:5.1f}%)")

# 5. R√©partition type de b√¢timent
print(f"\n      Type de b√¢timent :")
batiment_counts = df_preparation['type_batiment'].value_counts()
for type_bat, count in batiment_counts.items():
    pct = count / len(df_preparation) * 100
    print(f"         {type_bat:20s} : {count:7,} ({pct:5.1f}%)")

# 6. R√©partition p√©riode de construction
print(f"\n      P√©riode de construction :")
periode_counts = df_preparation['periode_construction'].value_counts().sort_index()
for periode, count in periode_counts.items():
    pct = count / len(df_preparation) * 100
    print(f"         {periode:20s} : {count:7,} ({pct:5.1f}%)")

print()

# ============================================================================
# AJOUT DES CAT√âGORIES D'ALTITUDE
# ============================================================================

print(f"üèîÔ∏è  Cat√©gorisation des logements par tranche d'altitude...\n")

# Application de la fonction de cat√©gorisation d√©finie dans config.py
# Les tranches sont d√©finies dans SEUILS_ALTITUDE (ex: 0-600m, 600-1200m, etc.)
df_preparation['tranche_altitude'] = df_preparation['altitude_moyenne'].apply(categoriser_altitude)

# Affichage de la r√©partition par tranche
print("   üìä R√©partition des logements par tranche d'altitude :\n")
repartition = df_preparation['tranche_altitude'].value_counts().sort_index()

for tranche, effectif in repartition.items():
    pourcentage = (effectif / len(df_preparation)) * 100
    print(f"      {tranche:35s} : {effectif:8,} logements ({pourcentage:5.1f}%)")

print()

# ============================================================================
# EXPORT DES DONN√âES PR√âPAR√âES
# ============================================================================

print("üíæ Sauvegarde des donn√©es pr√©par√©es...\n")

# Export du fichier CSV pr√©par√© et nettoy√©
fichier_sortie = DATA_PROCESSED_PATH / f"logements_{DEPARTEMENT}_cleaned.csv"
df_preparation.to_csv(fichier_sortie, index=False)
print(f"   ‚úÖ Fichier sauvegard√© : {fichier_sortie}")
print(f"   üìè Dimensions : {len(df_preparation):,} lignes √ó {len(df_preparation.columns)} colonnes")

# Export des m√©tadonn√©es au format JSON pour tra√ßabilit√©
metadata = {
    'departement': str(DEPARTEMENT),
    'nom_departement': str(NOM_DEPARTEMENT),
    'nb_logements_total': int(len(df_preparation)),
    'nb_logements_avec_altitude': int(nb_avec_altitude),
    'taux_altitude_pct': float(taux_altitude),
    'altitude_min': float(df_preparation['altitude_moyenne'].min()),
    'altitude_max': float(df_preparation['altitude_moyenne'].max()),
    'altitude_moyenne': float(df_preparation['altitude_moyenne'].mean()),
    'conso_moyenne': float(df_preparation['conso_5_usages_par_m2_ep'].mean()),
    'conso_mediane': float(df_preparation['conso_5_usages_par_m2_ep'].median())
}

fichier_metadata = DATA_PROCESSED_PATH / f"metadata_{DEPARTEMENT}.json"
with open(fichier_metadata, 'w', encoding='utf-8') as f:
    json.dump(metadata, f, indent=2, ensure_ascii=False)

print(f"   ‚úÖ M√©tadonn√©es sauvegard√©es : {fichier_metadata}")

# ============================================================================
# R√âSUM√â FINAL
# ============================================================================

print("\n" + "="*80)
print("‚úÖ PR√âPARATION DES DONN√âES TERMIN√âE AVEC SUCC√àS")
print("="*80)
print(f"\nüìÇ Fichier pr√™t pour l'analyse : {fichier_sortie}")
print(f"üìä {nb_avec_altitude:,} logements g√©olocalis√©s disponibles pour les graphiques\n")